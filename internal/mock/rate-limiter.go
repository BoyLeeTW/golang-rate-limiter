// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/rate-limiter.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "golang-rate-limiter/internal/models"
	reflect "reflect"
)

// MockRateLimiterInterface is a mock of RateLimiterInterface interface.
type MockRateLimiterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterInterfaceMockRecorder
}

// MockRateLimiterInterfaceMockRecorder is the mock recorder for MockRateLimiterInterface.
type MockRateLimiterInterfaceMockRecorder struct {
	mock *MockRateLimiterInterface
}

// NewMockRateLimiterInterface creates a new mock instance.
func NewMockRateLimiterInterface(ctrl *gomock.Controller) *MockRateLimiterInterface {
	mock := &MockRateLimiterInterface{ctrl: ctrl}
	mock.recorder = &MockRateLimiterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterInterface) EXPECT() *MockRateLimiterInterfaceMockRecorder {
	return m.recorder
}

// CheckExceed mocks base method.
func (m *MockRateLimiterInterface) CheckExceed(key string) (models.RateLimiterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExceed", key)
	ret0, _ := ret[0].(models.RateLimiterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExceed indicates an expected call of CheckExceed.
func (mr *MockRateLimiterInterfaceMockRecorder) CheckExceed(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExceed", reflect.TypeOf((*MockRateLimiterInterface)(nil).CheckExceed), key)
}
